script "piwikAnalyticsAPI"
local sAnalytics
local sUserParameters
local sBulk, sBulkRequestsCount

-----------------------------------------------------------------------------------------------------
-- initAnalytics
--DESCRIPTION:
--    This command takes all what we need for tracking
--PARAMETERS:
--    none
--CHANGES:
--    6/2/2016: Narek - Created the command
-----------------------------------------------------------------------------------------------------
command initAnalytics
   
   -- URL for tracking with Piwik, see the example below
   put "http://demo.piwik.org/piwik.php?" into tAnalytics["track_url"]
   
   -- URL for getting data from Piwik(Report), see the example below
   put "http://demo.piwik.org/index.php?" into tAnalytics["report_url"]
   
   -- Your Piwik Server token which you can find in settings (Peronal Settings>API)
   put "YOUR PIWIK SERVER TOKEN" into tAnalytics["token"]
   
   -- Piwik website URL which you want to track or to get reports about
   -- eg. &url=http://test.website.com
   put "&url=PIWIK WEB SITE URL" into tAnalytics["app_url"]
   
   -- Put the ID of site which you want to track or to get reports about
   --.eg &idsite=21&rec=1 (rec is always 1, it is required parameter)
   put "&idsite=ID OF WEBSITE&rec=1" into tAnalytics["app_siteid"]
   
   put tAnalytics into sAnalytics
end initAnalytics


-----------------------------------------------------------------------------------------------------
-- setUserInfo
--DESCRIPTION:
--    This command sets Piwik user information
--PARAMETERS:
--     pUserInfo: Is array with user information parameters (Recommended parameters)
--              pUserInfo["_id"]: The unique visitor ID, must be a 16 characters hexadecimal string.  Every unique visitor
--                                               must be assigned a different ID and this ID must not change after it is assigned.
--              pUserInfo["lang"]: This value is used to detect the visitor's country.
--              pUserInfo["uid"]: defines the User ID for this request. User ID is any non empty unique string identifying
--                                               the user (such as an email address or a username). To access this value, users must be
--                                                logged-in in your system so you can fetch this user ID from your system, and pass it to Piwik.
--              pUserInfo["res"]: The resolution of the device the visitor is using, eg 1280x1024.
--              pUserInfo["_cvar"]: Visit scope custom variables. This is a JSON encoded string of the custom variable array
--                                                   Like: { "1": [ "OS", "iphone 5.0" ], "2": [ "Piwik Mobile Version", "1.6.2" ] }
--CHANGES:
--    6/2/2016: Narek - Created the command
-----------------------------------------------------------------------------------------------------
command setUserInfo pUserInfo
   -- Build user info parameters to POST to server
   repeat for each key tInfo in pUserInfo
      put "&" & tInfo & "=" & pUserInfo[tInfo] after tUserParameters
   end repeat
   
   -- Save info for using within every request
   put tUserParameters into sUserParameters
end setUserInfo



-----------------------------------------------------------------------------------------------------
-- trackPage
--DESCRIPTION:
--    This command add view for page(track the page by pagename)
--PARAMETERS:
--    pPageName: Name of page which we want to track
--CHANGES:
--    6/2/2016: Narek - Created the fuction
-----------------------------------------------------------------------------------------------------
command trackPage pPageName
   
   -- Checking required parameters
   if pPageName is empty then
      answer "For page tracking PageName is required"
      exit trackPage
   end if
   
   -- In url we can't have white spaces
   replace space with "_" in pPageName
   
   -- Put page name and page path in url
   put sAnalytics["app_url"] & "window/" after tTrackURL
   put pPageName after tTrackURL
   
   if pPageName contains "/" then
      set the itemDel to "/"
      put the last item of pPageName into pPageName 
   end if
   
   put "&action_name=" & pPageName after tTrackURL
   
   -- ID of our app server
   put sAnalytics["app_siteid"] after tTrackURL
   
   ------------------------------------------------------------------
   --  Checking the connection
   ------------------------------------------------------------------
   if checkConnectionStatus() is false  then
      --------------------------------------------------------------------------------------
      -- If no internet connection then keep requests in bulk to send after
      --------------------------------------------------------------------------------------
      add 1 to sBulkRequestsCount
      
      -- Formating the parameters
      put "?" into char 1 of tTrackURL
      put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
      
   else
      --------------------------------------------------------------------------------------
      -- We have connection, so we need to check if we have requests to send
      --------------------------------------------------------------------------------------
      -- No Data in bulk to send
      if sBulk is empty then
         -- Send data
         get url (sAnalytics["track_url"] & "?token_auth=" & sAnalytics["Token"] & tTrackURL & sUserParameters)
      else
         --------------------------------------------------------------------------------------
         --  Put the current request into requests bulk and send to server
         --------------------------------------------------------------------------------------
         add 1 to sBulkRequestsCount
         
         put "?" into char 1 of tTrackURL
         put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
         
         -- Send requests bulk
         put bulkTracking() into tResult
         
         -- Check the result
         if tResult contains "success" then
            put empty into sBulk
            put 0 into sBulkRequestsCount
         end if
         --------------------------------------------------------------------------------------
         
      end if
   end if
end trackPage


-----------------------------------------------------------------------------------------------------
-- trackEvent
--DESCRIPTION:
--    This command track actions within the page
--PARAMETERS:
--    pEventAction: The event action. Must not be empty. (eg. Play, Pause, Duration, Add Playlist,)
--    pEventCategory: The event category. Must not be empty. (eg. Videos, Music, Games...)
--    pEventName: The event name. (eg. a Movie name, or Song name)
--CHANGES:
--    6/8/2016: Narek - Created the command
-----------------------------------------------------------------------------------------------------
command trackEvent pEventAction pEventCategory pEventName
   -- Checking required parameters
   if pEventAction is empty then
      answer "For page tracking EventAction is required"
      exit trackEvent
   end if
   
   if pEventCategory is empty then
      answer "For page tracking EventCategory is required"
      exit trackEvent
   end if
   
   
   -- Put action name and path into url
   put sAnalytics["app_url"] & "events/" after tTrackURL
   put pEventAction after tTrackURL
   
   -- Builds Events tracking parameters
   put "&e_c=" & pEventCategory after tTrackURL
   put "&e_a=" & pEventAction after tTrackURL
   
   if pEventName is not empty then
      put "&e_n=" & pEventName after tTrackURL
   end if
   
   -- ID of our app server
   put sAnalytics["app_siteid"] after tTrackURL
   
   ------------------------------------------------------------------
   --  Checking the connection
   ------------------------------------------------------------------
   if checkConnectionStatus() is false  then
      --------------------------------------------------------------------------------------
      -- If no internet connection then keep requests in bulk to send after
      --------------------------------------------------------------------------------------
      add 1 to sBulkRequestsCount
      
      -- Formating the parameters
      put "?" into char 1 of tTrackURL
      put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
      
   else
      --------------------------------------------------------------------------------------
      -- We have connection, so we need to check if we have requests to send
      --------------------------------------------------------------------------------------
      -- No Data in bulk to send
      if sBulk is empty then
         -- Send data
         get url (sAnalytics["track_url"] & "?token_auth=" & sAnalytics["Token"] & tTrackURL & sUserParameters)
      else
         --------------------------------------------------------------------------------------
         --  Put the current request into requests bulk and send to server
         --------------------------------------------------------------------------------------
         add 1 to sBulkRequestsCount
         
         put "?" into char 1 of tTrackURL
         put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
         
         -- Send requests bulk
         put bulkTracking() into tResult
         
         -- Check the result
         if tResult contains "success" then
            put empty into sBulk
            put 0 into sBulkRequestsCount
         end if
         --------------------------------------------------------------------------------------
         
      end if
   end if
end trackEvent


-----------------------------------------------------------------------------------------------------
-- trackException
--DESCRIPTION:
--    This command track exeptions
--PARAMETERS:
--    pExaptionName: Name of exception which user wants to track 
--CHANGES:
--    6/8/2016: Narek - Created the command
-----------------------------------------------------------------------------------------------------
command trackException pExceptionName
   -- Checking required parameters
   if pExceptionName is empty then
      answer "For page tracking ExceptionName is required"
      exit trackException
   end if
   
   -- Put exception name and path into url
   put sAnalytics["app_url"] & "exception/" after tTrackURL
   put pExceptionName after tTrackURL
   -- ID of our app server
   put sAnalytics["app_siteid"] after tTrackURL
   
   ------------------------------------------------------------------
   --  Checking the connection
   ------------------------------------------------------------------
   if checkConnectionStatus() is false  then
      --------------------------------------------------------------------------------------
      -- If no internet connection then keep requests in bulk to send after
      --------------------------------------------------------------------------------------
      add 1 to sBulkRequestsCount
      
      -- Formating the parameters
      put "?" into char 1 of tTrackURL
      put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
      
   else
      --------------------------------------------------------------------------------------
      -- We have connection, so we need to check if we have requests to send
      --------------------------------------------------------------------------------------
      -- No Data in bulk to send
      if sBulk is empty then
         -- Send data
         get url (sAnalytics["track_url"] & "?token_auth=" & sAnalytics["Token"] & tTrackURL & sUserParameters)
      else
         --------------------------------------------------------------------------------------
         --  Put the current request into requests bulk and send to server
         --------------------------------------------------------------------------------------
         add 1 to sBulkRequestsCount
         
         put "?" into char 1 of tTrackURL
         put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
         
         -- Send requests bulk
         put bulkTracking() into tResult
         
         -- Check the result
         if tResult contains "success" then
            put empty into sBulk
            put 0 into sBulkRequestsCount
         end if
         --------------------------------------------------------------------------------------
         
      end if
   end if
end trackException


-----------------------------------------------------------------------------------------------------
-- trackSearch
--DESCRIPTION:
--    This command track exeptions
--PARAMETERS:
--    pSearchKeyword: What user search in app
--    pSearchCat: Category of search keyword
--    pResultCount: Searsh results count.. in order we can know if user finds what he searched
--CHANGES:
--    6/8/2016: Narek - Created the command
-----------------------------------------------------------------------------------------------------
command trackSearch pSearchKeyword, pSearchCat, pResultCount
   -- Checking required parameters
   if pSearchKeyword is empty then
      answer "For page tracking Search Keyword is required"
      exit trackSearch
   end if
   
   -- Put exception name and path into url
   put sAnalytics["app_url"] & "search/" after tTrackURL
   
   -- Put parameters into url for tracking search keywords, category and result count
   put "&search=" & pSearchKeyword after tTrackURL
   
   if pSearchCat is not empty then
      put "&search_cat=" & pSearchCat after tTrackURL
   end if
   
   if pResultCount is not empty then
      put "&search_count=" & pResultCount after tTrackURL
   else
      -- When keywords are tracked with "&search_count=0"
      -- they will appear in the "No Result Search Keyword" report.
      put "&search_count=0" after tTrackURL
   end if
   
   -- ID of our app server
   put sAnalytics["app_siteid"] after tTrackURL
   
   ------------------------------------------------------------------
   --  Checking the connection
   ------------------------------------------------------------------
   if checkConnectionStatus() is false  then
      --------------------------------------------------------------------------------------
      -- If no internet connection then keep requests in bulk to send after
      --------------------------------------------------------------------------------------
      add 1 to sBulkRequestsCount
      
      -- Formating the parameters
      put "?" into char 1 of tTrackURL
      put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
      
   else
      --------------------------------------------------------------------------------------
      -- We have connection, so we need to check if we have requests to send
      --------------------------------------------------------------------------------------
      -- No Data in bulk to send
      if sBulk is empty then
         -- Send data
         get url (sAnalytics["track_url"] & "?token_auth=" & sAnalytics["Token"] & tTrackURL & sUserParameters)
      else
         --------------------------------------------------------------------------------------
         --  Put the current request into requests bulk and send to server
         --------------------------------------------------------------------------------------
         add 1 to sBulkRequestsCount
         
         put "?" into char 1 of tTrackURL
         put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
         
         -- Send requests bulk
         put bulkTracking() into tResult
         
         -- Check the result
         if tResult contains "success" then
            put empty into sBulk
            put 0 into sBulkRequestsCount
         end if
         --------------------------------------------------------------------------------------
         
      end if
   end if
end trackSearch


-----------------------------------------------------------------------------------------------------
-- trackGoal
--DESCRIPTION:
--    This command is tracking request will trigger a conversion for the goal of the app
--PARAMETERS:
--    pGoalID: ID of goal which wi can get from server
--    pRevenue: A monetary value that was generated as revenue by this goal conversion
--CHANGES:
--    6/8/2016: Narek - Created the command
----------------------------------------------------------------------------------------------------
command trackGoal pGoalID pRevenue
   -- Checking required parameters
   if pGoalID is empty then
      answer "For page tracking goal ID is required"
      exit trackGoal
   end if
   
   -- Put path of app into url
   put sAnalytics["app_url"] after tTrackURL
   
   -- Put Goal id into URL
   put "&idgoal=" & pGoalID after tTrackURL
   
   if pRevenue is not empty then
      put "&revenue=" & pRevenue after tTrackURL
   end if
   
   -- ID of our app server
   put sAnalytics["app_siteid"] after tTrackURL
   
   ------------------------------------------------------------------
   --  Checking the connection
   ------------------------------------------------------------------
   if checkConnectionStatus() is false  then
      --------------------------------------------------------------------------------------
      -- If no internet connection then keep requests in bulk to send after
      --------------------------------------------------------------------------------------
      add 1 to sBulkRequestsCount
      
      -- Formating the parameters
      put "?" into char 1 of tTrackURL
      put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
      
   else
      --------------------------------------------------------------------------------------
      -- We have connection, so we need to check if we have requests to send
      --------------------------------------------------------------------------------------
      -- No Data in bulk to send
      if sBulk is empty then
         -- Send data
         get url (sAnalytics["track_url"] & "?token_auth=" & sAnalytics["Token"] & tTrackURL & sUserParameters)
      else
         --------------------------------------------------------------------------------------
         --  Put the current request into requests bulk and send to server
         --------------------------------------------------------------------------------------
         add 1 to sBulkRequestsCount
         
         put "?" into char 1 of tTrackURL
         put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
         
         -- Send requests bulk
         put bulkTracking() into tResult
         
         -- Check the result
         if tResult contains "success" then
            put empty into sBulk
            put 0 into sBulkRequestsCount
         end if
         --------------------------------------------------------------------------------------
         
      end if
   end if
end trackGoal


-----------------------------------------------------------------------------------------------------
-- trackEcommerceOrder
--DESCRIPTION:
--    Tracks an Ecommerce order, including any ecommerce item previously added to the order.
--PARAMETERS:
--    pOrderID: The unique string identifier for the ecommerce order: (required)
--    pGrandTotal: The grand total for the ecommerce order: (required)
--    pSubTotal: The sub total of the order; excludes shipping
--    pTax: Tax Amount of the order
--    pShipping: Shipping cost of the Order
--    pDiscount: Discount offered
--CHANGES:
--    6/10/2016: Narek - Created the command
----------------------------------------------------------------------------------------------------
command trackEcommerceOrder pOrderID, pGrandTotal, pSubTotal, pTax, pShipping, pDiscount
   
   -- Checking required parameters
   if pOrderID is empty then
      answer "For page tracking Order ID is required"
      exit trackEcommerceOrder
   end if
   
   if pGrandTotal is empty then
      answer "For page tracking Grand Total is required"
      exit trackEcommerceOrder
   end if
   
   -- Put path of app into url
   put sAnalytics["app_url"] after tTrackURL
   
   -- Put order ID and revenue into url parameters
   put "&ec_id=" & pOrderID after TrackURL
   put "&revenue =" & pGrandTotal after TrackURL
   
   -- You must set &idgoal=0 in the request to track an ecommerce interaction
   put "&idgoal=0" after TrackURL
   
   --------Checking the parameters and put them into post url----------
   if pSubTotal is not empty then
      put "&ec_st=" & pSubTotal after tTrackURL
   end if
   
   if pTax is not empty then
      put "&ec_tx=" & pTax after tTrackURL
   end if
   
   if pShipping is not empty then
      put "&ec_sh=" & pShipping after tTrackURL
   end if
   
   if pDiscount is not empty then
      put "&ec_dt=" & pDiscount after tTrackURL
   end if
   ----------------------------------------------------------------------------
   
   -- ID of our app server
   put sAnalytics["app_siteid"] after tTrackURL
   
   ------------------------------------------------------------------
   --  Checking the connection
   ------------------------------------------------------------------
   if checkConnectionStatus() is false  then
      --------------------------------------------------------------------------------------
      -- If no internet connection then keep requests in bulk to send after
      --------------------------------------------------------------------------------------
      add 1 to sBulkRequestsCount
      
      -- Formating the parameters
      put "?" into char 1 of tTrackURL
      put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
      
   else
      --------------------------------------------------------------------------------------
      -- We have connection, so we need to check if we have requests to send
      --------------------------------------------------------------------------------------
      -- No Data in bulk to send
      if sBulk is empty then
         -- Send data
         get url (sAnalytics["track_url"] & "?token_auth=" & sAnalytics["Token"] & tTrackURL & sUserParameters)
      else
         --------------------------------------------------------------------------------------
         --  Put the current request into requests bulk and send to server
         --------------------------------------------------------------------------------------
         add 1 to sBulkRequestsCount
         
         put "?" into char 1 of tTrackURL
         put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
         
         -- Send requests bulk
         put bulkTracking() into tResult
         
         -- Check the result
         if tResult contains "success" then
            put empty into sBulk
            put 0 into sBulkRequestsCount
         end if
         --------------------------------------------------------------------------------------
         
      end if
   end if
end trackEcommerceOrder


-----------------------------------------------------------------------------------------------------
-- trackEcommerceCartUpdate
--DESCRIPTION:
--    Tracks a shopping cart. Call this every time a user is 
--    adding, updating or deleting a product from the cart.
--PARAMETERS:
--    pGrantTotal: Cart grand total (typically the sum of all items prices)
--CHANGES:
--    6/18/2016: Narek - Created the command
-----------------------------------------------------------------------------------------------------
command trackEcommerceCartUpdate pGrantTotal
   
   -- Checking required parameters
   if pGrantTotal is empty then
      answer "For page tracking Grant total is required"
      exit trackEcommerceCartUpdate
   end if
   
   -- Put path of app into url
   put sAnalytics["app_url"] after tTrackURL
   
   -- Put grant total into url parameters
   put "&revenue =" & pGrandTotal after TrackURL
   
   -- You must set &idgoal=0 in the request to track an ecommerce interaction
   put "&idgoal=0" after TrackURL
   
   -- ID of our app server
   put sAnalytics["app_siteid"] after tTrackURL
   
   ------------------------------------------------------------------
   --  Checking the connection
   ------------------------------------------------------------------
   if checkConnectionStatus() is false  then
      --------------------------------------------------------------------------------------
      -- If no internet connection then keep requests in bulk to send after
      --------------------------------------------------------------------------------------
      add 1 to sBulkRequestsCount
      
      -- Formating the parameters
      put "?" into char 1 of tTrackURL
      put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
      
   else
      --------------------------------------------------------------------------------------
      -- We have connection, so we need to check if we have requests to send
      --------------------------------------------------------------------------------------
      -- No Data in bulk to send
      if sBulk is empty then
         -- Send data
         get url (sAnalytics["track_url"] & "?token_auth=" & sAnalytics["Token"] & tTrackURL & sUserParameters)
      else
         --------------------------------------------------------------------------------------
         --  Put the current request into requests bulk and send to server
         --------------------------------------------------------------------------------------
         add 1 to sBulkRequestsCount
         
         put "?" into char 1 of tTrackURL
         put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
         
         -- Send requests bulk
         put bulkTracking() into tResult
         
         -- Check the result
         if tResult contains "success" then
            put empty into sBulk
            put 0 into sBulkRequestsCount
         end if
         --------------------------------------------------------------------------------------
         
      end if
   end if
end trackEcommerceCartUpdate


-----------------------------------------------------------------------------------------------------
-- checkConnectionStatus
--DESCRIPTION:
--    This function checks the connection, if no connection we can't track app
--PARAMETERS:
--    none:
--CHANGES:
--    6/18/2016: Narek - Created the fuction
----------------------------------------------------------------------------------------------------
private function checkConnectionStatus
   try 
      -- If the response of URL  is not empty it means connection is correct
      put ("http://www.google.com") into tCheckURL
      put URL(tCheckURL) into tConnCheck
      
   catch tError
      
   end try 
   
   if tConnCheck is empty then
      return false
   else
      return true
   end if
end checkConnectionStatus


-----------------------------------------------------------------------------------------------------
-- bulkTracking
--DESCRIPTION:
--    Build the bulk Json of all request end send it to server for tracking. Returns result of tracking
--PARAMETERS:
--    none:
--CHANGES:
--    6/18/2016: Narek - Created the fuction
----------------------------------------------------------------------------------------------------
private function bulkTracking
   -- Put token into bulk array
   put sAnalytics["token"] into sBulk["token_auth"]
   -- Convert it to Json for sending
   put ArrayToJSON(sBulk) into tBulkJson
   
   -- Sending json
   post tBulkJson to URL(sAnalytics["track_url"])
   -- Getting the result
   return it
end bulkTracking


-----------------------------------------------------------------------------------------------------
-- trackContentImpression
--DESCRIPTION:
--    Tracks a content impression using the specified values.
--PARAMETERS:
--    pContentName: The name of the content. For instance 'Ad Foo Bar'
--    pContentPiece: The actual content piece. For instance the path to an image, video, audio, any text
--    pContentTarget: The target of the content. For instance the URL of a landing page
--CHANGES:
--    6/10/2016: Narek - Created the command
-----------------------------------------------------------------------------------------------------
command trackContentImpression pContentName, pContentPiece, pContentTarget 
   -- Checking required parameters
   if pContentName is empty then
      exit trackContentImpression
   end if
   
   -- Put action name and path into url
   put sAnalytics["app_url"] & "conent/" after tTrackURL
   put pContentName after tTrackURL
   
   -- Builds Events tracking parameters
   put "&c_n=" & pContentName after tTrackURL
   
   if pContentPiece is not empty then
      put "&c_p=" & pContentPiece after tTrackURL
   end if
   
   if pContentTarget is not empty then
      put "&c_t=" & pContentTarget after tTrackURL
   end if
   
   -- ID of our app server
   put sAnalytics["app_siteid"] after tTrackURL
   
   ------------------------------------------------------------------
   --  Checking the connection
   ------------------------------------------------------------------
   if checkConnectionStatus() is false  then
      --------------------------------------------------------------------------------------
      -- If no internet connection then keep requests in bulk to send after
      --------------------------------------------------------------------------------------
      add 1 to sBulkRequestsCount
      
      -- Formating the parameters
      put "?" into char 1 of tTrackURL
      put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
      
   else
      --------------------------------------------------------------------------------------
      -- We have connection, so we need to check if we have requests to send
      --------------------------------------------------------------------------------------
      -- No Data in bulk to send
      if sBulk is empty then
         -- Send data
         get url (sAnalytics["track_url"] & "?token_auth=" & sAnalytics["Token"] & tTrackURL & sUserParameters)
      else
         --------------------------------------------------------------------------------------
         --  Put the current request into requests bulk and send to server
         --------------------------------------------------------------------------------------
         add 1 to sBulkRequestsCount
         
         put "?" into char 1 of tTrackURL
         put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
         
         -- Send requests bulk
         put bulkTracking() into tResult
         
         -- Check the result
         if tResult contains "success" then
            put empty into sBulk
            put 0 into sBulkRequestsCount
         end if
         --------------------------------------------------------------------------------------
         
      end if
   end if
end trackContentImpression


-----------------------------------------------------------------------------------------------------
-- trackContentInteraction
--DESCRIPTION:
--    Tracks a content interaction using the specified values.
--PARAMETERS:
--    pContentInteraction: The name of the interaction with the content. For instance a 'click'
--    pContentName: The name of the content. For instance 'Ad Foo Bar'
--    pContentPiece: The actual content piece. For instance the path to an image, video, audio, any text
--    pContentTarget: The target of the content. For instance the URL of a landing page
--CHANGES:
--    6/10/2016: Narek - Created the command
-----------------------------------------------------------------------------------------------------
command trackContentInteraction pContentInteraction, pContentName, pContentPiece, pContentTarget 
   -- Checking required parameters
   if pContentInteraction is empty then
      exit trackContentInteraction
   end if
   
   if pContentName is empty then
      exit trackContentInteraction
   end if
   
   -- Put action name and path into url
   put sAnalytics["app_url"] & "conent/" after tTrackURL
   put pContentName after tTrackURL
   
   -- Builds Events tracking parameters
   put "&c_i=" & pContentInteraction after tTrackURL
   put "&c_n=" & pContentName after tTrackURL
   
   if pContentPiece is not empty then
      put "&c_p=" & pContentPiece after tTrackURL
   end if
   
   if pContentTarget is not empty then
      put "&c_t=" & pContentTarget after tTrackURL
   end if
   
   -- ID of our app server
   put sAnalytics["app_siteid"] after tTrackURL
   
   ------------------------------------------------------------------
   --  Checking the connection
   ------------------------------------------------------------------
   if checkConnectionStatus() is false  then
      --------------------------------------------------------------------------------------
      -- If no internet connection then keep requests in bulk to send after
      --------------------------------------------------------------------------------------
      add 1 to sBulkRequestsCount
      
      -- Formating the parameters
      put "?" into char 1 of tTrackURL
      put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
      
   else
      --------------------------------------------------------------------------------------
      -- We have connection, so we need to check if we have requests to send
      --------------------------------------------------------------------------------------
      -- No Data in bulk to send
      if sBulk is empty then
         -- Send data
         get url (sAnalytics["track_url"] & "?token_auth=" & sAnalytics["Token"] & tTrackURL & sUserParameters)
      else
         --------------------------------------------------------------------------------------
         --  Put the current request into requests bulk and send to server
         --------------------------------------------------------------------------------------
         add 1 to sBulkRequestsCount
         
         put "?" into char 1 of tTrackURL
         put tTrackURL & sUserParameters into sBulk["requests"][sBulkRequestsCount]
         
         -- Send requests bulk
         put bulkTracking() into tResult
         
         -- Check the result
         if tResult contains "success" then
            put empty into sBulk
            put 0 into sBulkRequestsCount
         end if
         --------------------------------------------------------------------------------------
         
      end if
   end if
end trackContentInteraction


---------------------------------------------------------------------------------------------------------------------
-- actionsGet
--DESCRIPTION:
--    Fuction returns all action information: (pageviews, unique pageviews, downloads, unique downloads
--     outlinks, unique outlinks, searches, keywords, avg. time generation)
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGet pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.get" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGet



---------------------------------------------------------------------------------------------------------------------
-- actionsGetPageURLsList
--DESCRIPTION:
--    This function returns all pages urls witihin the current website
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetPageURLsList pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getPageUrls" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetPageURLsList



---------------------------------------------------------------------------------------------------------------------
-- actionsGetEntryPageURLsList
--DESCRIPTION:
--    This function returns all entry pages data
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetEntryPageURLsList pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getEntryPageUrls" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetEntryPageURLsList



---------------------------------------------------------------------------------------------------------------------
-- actionsGetExitPagesURLsList
--DESCRIPTION:
--    This function returns all exit pages data
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetExitPagesURLsList pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getExitPageUrls" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Build other, not required paramters for request
   repeat for each key tParam in pOtherParameters
      put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
   end repeat
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetExitPagesURLsList



---------------------------------------------------------------------------------------------------------------------
-- actionsGetPageURL
--DESCRIPTION:
--    This function returns one page data by page url
--PARAMETERS:
--    pPageURL: URL of page which's data we want to get
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetPageURL pPageURL, pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pPageURL is empty then
      return "Error: pPageURL is required"
   end if
   
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getPageUrl" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Page URL must be url encoded before sending
   put urlEncode(pPageURL) into pPageURL
   
   -- Build api call with passed required parameters
   put "&pageUrl=" & pPageURL after tAPICall
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetPageURL



---------------------------------------------------------------------------------------------------------------------
-- actionsGetPageTitles
--DESCRIPTION:
--    This function returns one page data by page name
--PARAMETERS:
--    pPageName: Name(title) of page which's data we want to get
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetPageTitle pPageName, pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pPageName is empty then
      return "Error: pPageName is required"
   end if
   
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getPageTitle" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Page name must be url encoded before sending
   put urlEncode(pPageName) into pPageName
   
   -- Build api call with passed required parameters
   put "&pageName=" & pPageName after tAPICall
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetPageTitle



---------------------------------------------------------------------------------------------------------------------
-- actionsGetExitPagesTitlesList
--DESCRIPTION:
--    This function returns all exit pages titles data
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetExitPagesTitlesList pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getExitPageTitles" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetExitPagesTitlesList



---------------------------------------------------------------------------------------------------------------------
-- actionsGetEntryPageTitlesList
--DESCRIPTION:
--    This function returns all entry pages titles data
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetEntryPageTitlesList pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getEntryPageTitles" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetEntryPageTitlesList


---------------------------------------------------------------------------------------------------------------------
-- actionsGetPageTitlesList
--DESCRIPTION:
--    This function returns all pages titles witihin the current website
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetPageTitlesList pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getPageTitles" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetPageTitlesList



---------------------------------------------------------------------------------------------------------------------
-- actionsGetDownloadsList
--DESCRIPTION:
--    This function returns all downloads witihin the current website
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetDownloadsList pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getDownloads" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetDownloadsList



---------------------------------------------------------------------------------------------------------------------
-- actionsGetDownloadByURL
--DESCRIPTION:
--    This function returns one download data by url
--PARAMETERS:
--    pDownloadURL: URL of current download of website
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetDownloadByURL pDownloadURL, pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pDownloadURL is empty then
      return "Error: pDownloadURL is required"
   end if
   
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getDownloads" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Page name must be url encoded before sending
   put urlEncode(pDownloadURL) into pDownloadURL
   
   -- Build api call with passed required parameters
   put "&downloadUrl=" & pDownloadURL after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetDownloadByURL



---------------------------------------------------------------------------------------------------------------------
-- actionsGetOutlinkByURL
--DESCRIPTION:
--    This function returns one outlink data by url
--PARAMETERS:
--    pOutlinkURL: URL of current outlink of website
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetOutlinkByURL pOutlinkURL, pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pOutlinkURL is empty then
      return "Error: pOutlinkURL is required"
   end if
   
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getOutlink" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Page name must be url encoded before sending
   put urlEncode(pOutlinkURL) into pOutlinkURL
   
   -- Build api call with passed required parameters
   put "&outlinkUrl=" & pOutlinkURL after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetOutlinkByURL



---------------------------------------------------------------------------------------------------------------------
-- actionsGetOutlinksList
--DESCRIPTION:
--    This function returns all downloads witihin the current website
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetOutlinksList pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getOutlinks" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetOutlinksList



---------------------------------------------------------------------------------------------------------------------
-- actionsGetSiteSearchKeywords
--DESCRIPTION:
--    This function returns all search keywords in website
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetSiteSearchKeywords pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getSiteSearchKeywords" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetSiteSearchKeywords



---------------------------------------------------------------------------------------------------------------------
-- actionsGetSiteSearchNoResultKeywords
--DESCRIPTION:
--    This function returns all search keywords with no result in website
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetSiteSearchNoResultKeywords pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getSiteSearchNoResultKeywords" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetSiteSearchNoResultKeywords



---------------------------------------------------------------------------------------------------------------------
-- actionsGetSiteSearchCategories
--DESCRIPTION:
--    This function returns all search categories in website
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function actionsGetSiteSearchCategories pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Actions.getSiteSearchCategories" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end actionsGetSiteSearchCategories


---------------------------------------------------------------------------------------------------------------------
-- contentsGetNames
--DESCRIPTION:
--    This function returns all content names
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function contentsGetNames pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Contents.getContentNames" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end contentsGetNames



---------------------------------------------------------------------------------------------------------------------
-- contentsGetPieces
--DESCRIPTION:
--    This function returns all content pieces
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function contentsGetPieces pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Contents.getContentPieces" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end contentsGetPieces



---------------------------------------------------------------------------------------------------------------------
-- customVariablesGet
--DESCRIPTION:
--    This function returns all custom variables
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function customVariablesGet pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=CustomVariables.getCustomVariables" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end customVariablesGet


---------------------------------------------------------------------------------------------------------------------
-- customVariablesGet
--DESCRIPTION:
--    This function returns all custom variables
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function customVariablesGet pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=CustomVariables.getCustomVariables" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end customVariablesGet


---------------------------------------------------------------------------------------------------------------------
-- devicesDetectionGetType
--DESCRIPTION:
--    This function returns all devices types
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function devicesDetectionGetType pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=DevicesDetection.getType" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end devicesDetectionGetType



---------------------------------------------------------------------------------------------------------------------
-- devicesDetectionGetModel
--DESCRIPTION:
--    This function returns all devices models
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function devicesDetectionGetModel pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=DevicesDetection.getModel" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end devicesDetectionGetModel



---------------------------------------------------------------------------------------------------------------------
-- devicesDetectionGetOSVersions
--DESCRIPTION:
--    This function returns all devices OS versions
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function devicesDetectionGetOSVersions pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=DevicesDetection.getOsVersions" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end devicesDetectionGetOSVersions



---------------------------------------------------------------------------------------------------------------------
-- devicesDetectionGetBrowsers
--DESCRIPTION:
--    This function returns all devices browsers
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function devicesDetectionGetBrowsers pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=DevicesDetection.getBrowsers" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end devicesDetectionGetBrowsers


---------------------------------------------------------------------------------------------------------------------
-- devicesGetResolutions
--DESCRIPTION:
--    This function returns number of for example visitors for each device resolution
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function devicesGetResolutions pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Resolution.getResolution" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end devicesGetResolutions


---------------------------------------------------------------------------------------------------------------------
-- devicesGetConfiguration
--DESCRIPTION:
--    This function returns number of for example visitors for each device cofiguration (eg. "Windows / Chrome / 1920x1080" - visits:87)
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function devicesGetConfiguration pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Resolution.getConfiguration" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end devicesGetConfiguration



---------------------------------------------------------------------------------------------------------------------
-- eventsGetCategory
--DESCRIPTION:
--    This function returns all events categories
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function eventsGetCategory pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Events.getCategory" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end eventsGetCategory



---------------------------------------------------------------------------------------------------------------------
-- eventsGetAction
--DESCRIPTION:
--    This function returns all events actions
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function eventsGetAction pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Events.getAction" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end eventsGetAction



---------------------------------------------------------------------------------------------------------------------
-- eventsGetName
--DESCRIPTION:
--    This function returns all events names
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function eventsGetName pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Events.getName" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end eventsGetName


---------------------------------------------------------------------------------------------------------------------
-- goalsGetList
--DESCRIPTION:
--    This function returns all events names
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function goalsGetList pSiteID
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Goals.getGoals" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end goalsGetList



---------------------------------------------------------------------------------------------------------------------
-- goalAdd
--DESCRIPTION:
--    This function creates new goal
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pName: Name od creating goal
--    pMatchAttribute: Can be only
--                                            "Visit a given URL (page or group of pages)"
--                                            "Visit a given Page Title"
--                                            "Send an event" (Event Category or Event Name or Event Action), EXAMPLE - "Send an event (Event Name)"
--                                            "Download a file"
--                                            "Click on a Link to an external website"
--    pPattern: Pattern of goal
--    pPatternType: Can be only
--                                            "contains"
--                                            "is exactly"
--                                            "matches the expression"
--    pCaseSensitive: Can be only: 1 or 0
--    pRevenue:  Goal default revenue. For example, a Contact Form submitted by a visitor may be worth $10 on average. 
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function goalAdd pSiteID, pName, pMatchAttribute, pPattern, pPatternType, pCaseSensitive, pRevenue
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pName is empty then
      return "Error: pName is required"
   end if
   
   if pMatchAttribute is empty then
      return "Error: pMatchAttribute is required"
   end if
   
   if pPattern is empty then
      return "Error: pPattern is required"
   end if
   
   if pPatternType is empty then
      return "Error: pPatternType is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Goals.addGoal" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&name=" & pName after tAPICall
   put "&matchAttribute=" & pMatchAttribute after tAPICall
   put "&pattern=" & pPattern after tAPICall
   put "&patternType=" & pPatternType after tAPICall
   
   if pCaseSensitive is 1 then
      put "&caseSensitive=1" after tAPICall
   end if
   
   if pRevenue is an integer then
      put "&revenue=" & pRevenue after tAPICall
   end if
   
   replace space with "+" in tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end goalAdd



---------------------------------------------------------------------------------------------------------------------
-- goalUpdate
--DESCRIPTION:
--    This function update the created goal
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pGoalID: ID of goal which we want to update
--    pName: Name od creating goal
--    pMatchAttribute: Can be only
--                                            "Visit a given URL (page or group of pages)"
--                                            "Visit a given Page Title"
--                                            "Send an event" (Event Category or Event Name or Event Action), EXAMPLE - "Send an event (Event Name)"
--                                            "Download a file"
--                                            "Click on a Link to an external website"
--    pPattern: Pattern of goal
--    pPatternType: Can be only
--                                            "contains"
--                                            "is exactly"
--                                            "matches the expression"
--    pCaseSensitive: Can be only: 1 or 0
--    pRevenue:  Goal default revenue. For example, a Contact Form submitted by a visitor may be worth $10 on average. 
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function goalUpdate pSiteID, pGoalID, pName, pMatchAttribute, pPattern, pPatternType, pCaseSensitive, pRevenue
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pGoalID is empty then
      return "Error: pGoalID is required"
   end if
   
   if pName is empty then
      return "Error: pName is required"
   end if
   
   if pMatchAttribute is empty then
      return "Error: pMatchAttribute is required"
   end if
   
   if pPattern is empty then
      return "Error: pPattern is required"
   end if
   
   if pPatternType is empty then
      return "Error: pPatternType is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Goals.updateGoal" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&idGoal=" & pGoalID after tAPICall
   put "&name=" & pName after tAPICall
   put "&matchAttribute=" & pMatchAttribute after tAPICall
   put "&pattern=" & pPattern after tAPICall
   put "&patternType=" & pPatternType after tAPICall
   
   if pCaseSensitive is 1 then
      put "&caseSensitive=1" after tAPICall
   end if
   
   if pRevenue is an integer then
      put "&revenue=" & pRevenue after tAPICall
   end if
   
   replace space with "+" in tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end goalUpdate


---------------------------------------------------------------------------------------------------------------------
-- goalDelete
--DESCRIPTION:
--    This function delete the goal by id
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pGoalID: ID of goal which we want to update
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function goalDelete pSiteID, pGoalID
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pGoalID is empty then
      return "Error: pGoalID is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Goals.deleteGoal" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&idGoal=" & pGoalID after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end goalDelete



---------------------------------------------------------------------------------------------------------------------
-- visitsSummaryGet
--DESCRIPTION:
--    This function returns all visists data (unique visitors, users, visits, actions, visits converted, bounce count, sum visit length,
--                                                                       max actions, bounce rate, actions per visit, average time on site)
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function visitsSummaryGet pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=VisitsSummary.get" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end visitsSummaryGet



---------------------------------------------------------------------------------------------------------------------
-- visitsGetNumberOfVisitsPerVisitDuration
--DESCRIPTION:
--    This function returns all visits number per duration. Like: "{"label":"0-10s","nb_visits":"210"}"
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function visitsGetNumberOfVisitsPerVisitDuration pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=VisitorInterest.getNumberOfVisitsPerVisitDuration" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end visitsGetNumberOfVisitsPerVisitDuration



---------------------------------------------------------------------------------------------------------------------
-- visitsGetNumberOfVisitsPerPage
--DESCRIPTION:
--    This function returns all visits number per page. Like: "{"label":"Page Name","nb_visits":"210"}"
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function visitsGetNumberOfVisitsPerPage pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=VisitorInterest.getNumberOfVisitsPerPage" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end visitsGetNumberOfVisitsPerPage


---------------------------------------------------------------------------------------------------------------------
-- visitsGetNumberOfVisitsByVisitsCount
--DESCRIPTION:
--    This function returns all visits number by visits count.
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function visitsGetNumberOfVisitsByVisitsCount pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=VisitorInterest.getNumberOfVisitsByVisitCount" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end visitsGetNumberOfVisitsByVisitsCount



---------------------------------------------------------------------------------------------------------------------
-- eCommerceGetItemsSku
--DESCRIPTION:
--    If you have eCommerce, this function returns all your products SKU
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function eCommerceGetItemsSku pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Goals.getItemsSku" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end eCommerceGetItemsSku



---------------------------------------------------------------------------------------------------------------------
-- eCommerceGetItemsName
--DESCRIPTION:
--    If you have eCommerce, this function returns all your products names
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function eCommerceGetItemsName pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Goals.getItemsName" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end eCommerceGetItemsName



---------------------------------------------------------------------------------------------------------------------
-- eCommerceGetItemsCategory
--DESCRIPTION:
--   If you have eCommerce, this function returns all your products categories
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function eCommerceGetItemsCategory pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Goals.getItemsCategory" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end eCommerceGetItemsCategory



---------------------------------------------------------------------------------------------------------------------
-- goalGetDaysToConversion
--DESCRIPTION:
--   Get days to current conversion
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pGoalID: id of current goal
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function goalGetDaysToConversion pSiteID, pGoalID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Goals.getDaysToConversion" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&idGoal=" & pGoalID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end goalGetDaysToConversion



---------------------------------------------------------------------------------------------------------------------
-- goalGetVisitsUntilConversion
--DESCRIPTION:
--   Get visits number until conversion
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pGoalID: id of current goal
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function goalGetVisitsUntilConversion pSiteID, pGoalID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Goals.getVisitsUntilConversion" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&idGoal=" & pGoalID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end goalGetVisitsUntilConversion



---------------------------------------------------------------------------------------------------------------------
-- referrersGetAll
--DESCRIPTION:
--   Get all referrers data (labels, unique visitors, users, actions, visits, max actions, lenght, referrer type)
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function referrersGetAll pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Referrers.getAll" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end referrersGetAll


---------------------------------------------------------------------------------------------------------------------
-- referrersGetKeywords
--DESCRIPTION:
--   Returns all referrers keywords data
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function referrersGetKeywords pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Referrers.getKeywords" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end referrersGetKeywords


---------------------------------------------------------------------------------------------------------------------
-- referrersGetKeywordsForPageURL
--DESCRIPTION:
--   Returns all referrers keywords data for page url
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pURL: URL of page
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function referrersGetKeywordsForPageURL pSiteID, pPeriod, pDate, pURL
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   if pURL is empty then
      return "Error: pURL is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Referrers.getKeywordsForPageUrl" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   replace space with "%20" in pURL
   put "&url=" & pURL after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end referrersGetKeywordsForPageURL



---------------------------------------------------------------------------------------------------------------------
-- referrersGetKeywordsForPageTitle
--DESCRIPTION:
--   Returns all referrers keywords data for page title
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pTitle: Title of page
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function referrersGetKeywordsForPageTitle pSiteID, pPeriod, pDate, pTitle
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   if pTitle is empty then
      return "Error: pTitle is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Referrers.getKeywordsForPageTitle" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   replace space with "%20" in pURL
   put "&title=" & pTitle after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end referrersGetKeywordsForPageTitle



---------------------------------------------------------------------------------------------------------------------
-- referrersGetSearchEngines
--DESCRIPTION:
--   Returns all referrers keywords search engines
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function referrersGetSearchEngines pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Referrers.getSearchEngines" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end referrersGetSearchEngines



---------------------------------------------------------------------------------------------------------------------
-- referrersGetCampaigns
--DESCRIPTION:
--   Returns all referrers keywords search engines
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function referrersGetCampaigns pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Referrers.getSearchEngines" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end referrersGetCampaigns



---------------------------------------------------------------------------------------------------------------------
-- referrersGetWebsites
--DESCRIPTION:
--   Returns all referrers web sites
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function referrersGetWebsites pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Referrers.getWebsites" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end referrersGetWebsites



---------------------------------------------------------------------------------------------------------------------
-- referrersGetSocials
--DESCRIPTION:
--   Returns all referrers socials (fb, twitter ...)
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function referrersGetSocials pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=Referrers.getSocials" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end referrersGetSocials


---------------------------------------------------------------------------------------------------------------------
-- sitesGetAll
--DESCRIPTION:
--   Returns all sites data from server
--PARAMETERS:
--   none:
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function sitesGetAll
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=SitesManager.getAllSites" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end sitesGetAll


---------------------------------------------------------------------------------------------------------------------
-- siteAdd
--DESCRIPTION:
--    Add new website in server
--PARAMETERS:
--    pSiteName: Creating site name
--    pURLs: Creating site URLs (you can set more then one)
--    pEcommerce: Set 1 for eCommerce in your site
--    pSiteSearch: by default site search tracking is enabled.. set 0 for disabled
--    pCurrency: Set currency for your site (eg. USD, EUR)
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function siteAdd pSiteName, pURLs, pEcommerce, pSiteSearch, pCurrency, pOtherParameters 
   -- Checking the required parameters
   if pSiteName is empty then
      return "Error: pSiteName is required"
   end if
   
   if pURLs is empty then
      return "Error: pURLs is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=SitesManager.addSite" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&siteName=" & pSiteName after tAPICall
   put "&urls=" & pURLs after tAPICall
   
   if pEcommerce is not empty then
      put "&ecommerce =" & pEcommerce after tAPICall
   end if
   
   if pSiteSearch is not empty then
      put "&siteSearch =" & pSiteSearch after tAPICall
   end if
   
   if pCurrency is not empty then
      put "&currency =" & pCurrency after tAPICall
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end siteAdd



---------------------------------------------------------------------------------------------------------------------
-- siteUpdate
--DESCRIPTION:
--    Update website in server by id
--PARAMETERS:
--    pSiteID: Id of site which we want to update
--    pSiteName: Updating site name
--    pURLs: Updating site URLs (you can set more then one)
--    pEcommerce: Set 1 for eCommerce in your site
--    pSiteSearch: by default site search tracking is enabled.. set 0 for disabled
--    pCurrency: Set currency for your site (eg. USD, EUR)
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function siteUpdate pSiteID, pSiteName, pURLs, pEcommerce, pSiteSearch, pCurrency, pOtherParameters 
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pSiteName is empty then
      return "Error: pSiteName is required"
   end if
   
   if pURLs is empty then
      return "Error: pURLs is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=SitesManager.updateSite" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&siteName=" & pSiteName after tAPICall
   put "&urls=" & pURLs after tAPICall
   put "&idSite=" & pSiteID after tAPICall
   
   if pEcommerce is not empty then
      put "&ecommerce =" & pEcommerce after tAPICall
   end if
   
   if pSiteSearch is not empty then
      put "&siteSearch =" & pSiteSearch after tAPICall
   end if
   
   if pCurrency is not empty then
      put "&currency =" & pCurrency after tAPICall
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end siteUpdate



---------------------------------------------------------------------------------------------------------------------
-- siteUpdate
--DESCRIPTION:
--    Delete website from Piwik server by id
--PARAMETERS:
--    pSiteID: Id of site which we want to delete
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function siteDelete pSiteID
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=SitesManager.deleteSite" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end siteDelete



---------------------------------------------------------------------------------------------------------------------
-- usersGetCountry
--DESCRIPTION:
--   Returns all users data by country
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function usersGetCountry pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UserCountry.getCountry" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end usersGetCountry


---------------------------------------------------------------------------------------------------------------------
-- usersGetCity
--DESCRIPTION:
--   Returns all users data by city
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function usersGetCity pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UserCountry.getCity" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end usersGetCity



---------------------------------------------------------------------------------------------------------------------
-- usersGetLanguages
--DESCRIPTION:
--   Returns all users data by languages
--PARAMETERS:
--    pSiteID: ID of site which information we want to get
--    pPeriod: The period you request the statistics for. Can be any of: day, week, month, year or range.
--                     For example to request a report for the range Jan 1st to Feb 15th you would write
--                     &period=range&date=2011-01-01,2011-02-15
--    pDate: standard format = YYYY-MM-DD;
--                  magic keywords = today or yesterday;
--         Range of dates:
--                 lastX = for exaple "&date=last10" returns last 10 periods including today
--                 previousX = for exaple "&date=previous10" returns the last 10 periods before today
--    pSegment:  defines the Custom Segment you wish to filter your reports to for example,
--                          'referrerName==twitter.com' will return the requested API report,
--                           processed for the subset of users coming from twitter.com
--                 Segment Documenation: http://developer.piwik.org/api-reference/reporting-api-segmentation
--    pOtherParameters: Array with other, not required parameters for getting the reports.
--                                         pOtherParameters["PARAMETER NAME"] = VALUE
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function usersGetLanguages pSiteID, pPeriod, pDate, pSegment, pOtherParameters
   -- Checking the required parameters
   if pSiteID is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPeriod is empty then
      return "Error: pPeriod is required"
   end if
   
   if pDate is empty then
      return "Error: pDate is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UserLanguage.getLanguage" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&idSite=" & pSiteID after tAPICall
   put "&period=" & pPeriod after tAPICall
   put "&date=" & pDate after tAPICall
   
   -- Build segment parameter
   if pSegment is not empty then
      put "&segment=" & pSegment after tAPICall 
   end if
   
   -- Build other, not required paramters for request
   if pOtherParameters is not empty then
      repeat for each key tParam in pOtherParameters
         put "&" & tParam & "=" & pOtherParameters[tParam] after tAPICall
      end repeat
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end usersGetLanguages



---------------------------------------------------------------------------------------------------------------------
-- userGetByLogin
--DESCRIPTION:
--   Returns all users data by languages
--PARAMETERS:
--    pUserLogin: Login of user which info we want to get
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function userGetByLogin pUserLogin
   -- Checking the required parameters
   if pUserLogin is empty then
      return "Error: pSiteID is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UsersManager.getUser" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&userLogin=" & pUserLogin after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end userGetByLogin


---------------------------------------------------------------------------------------------------------------------
-- userAdd
--DESCRIPTION:
--    Add user to Piwik server 
--PARAMETERS:
--    pUserLogin: Creatind user login
--    pPassword: Password for user 
--    pEmail: email address of user
--    pAlias: Alias for creating user
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function userAdd pUserLogin, pPassword, pEmail, pAlias 
   -- Checking the required parameters
   if pUserLogin is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPassword is empty then
      return "Error: pPassword is required"
   end if
   
   if pEmail is empty then
      return "Error: pEmail is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UsersManager.addUser" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&userLogin=" & pUserLogin after tAPICall
   put "&password=" & pPassword after tAPICall
   put "&email=" & pEmail after tAPICall
   
   if pAlias is not empty then
      put "&alias=" & pAlias after tAPICall
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end userAdd



---------------------------------------------------------------------------------------------------------------------
-- userSetSuperUser
--DESCRIPTION:
--    With this fuction we can set user to superuser
--PARAMETERS:
--    pUserLogin: Creatind user login
--    pHasSuperUserAccess: Need to be an "1";  (eg. "&hasSuperUserAccess=1")
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function userSetSuperUser pUserLogin, pHasSuperUserAccess
   -- Checking the required parameters
   if pUserLogin is empty then
      return "Error: pSiteID is required"
   end if
   
   if pHasSuperUserAccess is empty then
      return "Error: pHasSuperUserAccess is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UsersManager.setSuperUserAccess" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&userLogin=" & pUserLogin after tAPICall
   put "&hasSuperUserAccess=" & pHasSuperUserAccess after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end userSetSuperUser



---------------------------------------------------------------------------------------------------------------------
-- userUpdate
--DESCRIPTION:
--    Update user to Piwik server 
--PARAMETERS:
--    pUserLogin: Updating user login
--    pPassword: Password for user 
--    pEmail: email address of user
--    pAlias: Alias for updating user
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function userUpdate pUserLogin, pPassword, pEmail, pAlias 
   -- Checking the required parameters
   if pUserLogin is empty then
      return "Error: pSiteID is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UsersManager.updateUser" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&userLogin=" & pUserLogin after tAPICall
   
   if pPassword is not empty then
      put "&password=" & pPassword after tAPICall
   end if
   
   if pEmail is not empty then
      put "&email=" & pEmail after tAPICall
   end if
   
   if pAlias is not empty then
      put "&alias=" & pAlias after tAPICall
   end if
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end userUpdate



---------------------------------------------------------------------------------------------------------------------
-- userDelete
--DESCRIPTION:
--    Delete user from Piwik server 
--PARAMETERS:
--    pUserLogin: Deleting user login
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function userDelete pUserLogin
   -- Checking the required parameters
   if pUserLogin is empty then
      return "Error: pSiteID is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UsersManager.deleteUser" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&userLogin=" & pUserLogin after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end userDelete



---------------------------------------------------------------------------------------------------------------------
-- userGetTokenAuth
--DESCRIPTION:
--    This function gets token auth for current user.
--PARAMETERS:
--    pUserLogin: User login
--    pPassword: Password of user 
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function userGetTokenAuth pUserLogin, pPassword
   -- Checking the required parameters
   if pUserLogin is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPassword is empty then
      return "Error: pPassword is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UsersManager.getTokenAuth" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&userLogin=" & pUserLogin after tAPICall
   
   -- For getting we need to turn user password to md5 hash
   put md5Digest(pPassword) into tPasswordBinary
   get binarydecode("H*",tPasswordBinary,tHash) 
   
   put "&md5Password=" & tHash after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end userGetTokenAuth


---------------------------------------------------------------------------------------------------------------------
-- userSetPreference
--DESCRIPTION:
--    Set custom prefernece for user
--PARAMETERS:
--    pUserLogin: Deleting user login
--    pPreferenceName: The name of creating preference
--    pPreferenceValue: The value of creating preference
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function userSetPreference pUserLogin, pPreferenceName, pPreferenceValue
   -- Checking the required parameters
   if pUserLogin is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPreferenceName is empty then
      return "Error: pPreferenceName is required"
   end if
   
   if pPreferenceValue is empty then
      return "Error: pPreferenceValue is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UsersManager.setUserPreference" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&userLogin=" & pUserLogin after tAPICall
   put "&preferenceName=" & pPreferenceName after tAPICall
   put "&preferenceValue=" & pPreferenceValue after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end userSetPreference



---------------------------------------------------------------------------------------------------------------------
-- userGetPreference
--DESCRIPTION:
--    Get custom prefernece for user by preference name
--PARAMETERS:
--    pUserLogin: Deleting user login
--    pPreferenceName: The name of creating preference
--    pPreferenceValue: The value of creating preference
--CHANGES:
--    6/22/2016: Narek - Created the fuction
---------------------------------------------------------------------------------------------------------------------
function userGetPreference pUserLogin, pPreferenceName
   -- Checking the required parameters
   if pUserLogin is empty then
      return "Error: pSiteID is required"
   end if
   
   if pPreferenceName is empty then
      return "Error: pPreferenceName is required"
   end if
   
   -- Disable the SSL verification
   libURLSetSSLVerification false
   
   -- Setting the headers
   put "Content-Type: application/json" & cr after tHeader
   set the httpheaders to tHeader
   
   -- Default parameters for current report
   put "?module=API&method=UsersManager.getUserPreference" into tAPICall
   put "&format=Json" after tAPICall
   
   -- Build api call with passed required parameters
   put "&userLogin=" & pUserLogin after tAPICall
   put "&preferenceName=" & pPreferenceName after tAPICall
   
   -- Do GET request method for getting the data 
   GET URL(sAnalytics["report_url"] & tAPICall & "&token_auth=" & sAnalytics["token"])
   put it into tResult
   
   -- Convert the json to Livecode array
   put JSONToArray(tResult) into tResultArray
   
   -- Getting the report
   return tResultArray
end userGetPreference
